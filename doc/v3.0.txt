ADD A BENCH
===========

Current Architecture.
====================
- Friend currently has
  VIEW_INDEX
  FRAME_ID
  VIEW_ID
  THUMB_VIEW_ID
  NAME_TEXT_ID
  - The VIEW_INDEX is set on registration.
  - FRAME_ID, VIEW_ID, THUMB_VIEW_ID, NAME_TEXT_ID are assigned by the HomeActivity round robin based on the VIEW_INDEX.

- VideoPlayers 
  - A video player is currently created for each friend.
  - It gets the video view and the thumb view from the friend.
  - VideoPlayer.allVideoPlayers is keyed by friendId  
  
  
New Architecture
================

Scenarios:
----------
- Click on friend already on the grid plays video for friend
- Click friend on the bench moves friend to the grid
- Video comes in for friend on the grid. Highlights and shows thumb.
- Video comes in for friend not on the grid. Moves friend to the grid and highlights and shows thumb.

GridElement 
-----------
- Role: 
  - manages the 8 boxes  
  - tracks which friend is currently associated with which one.
  - tracks which views are associated with each one.
  - tracks which videoPlayer is associate with each one.

- Instantiation:
  - Via factory ala friend

- Persistence:
  - State needs to be persisted ala friends.
  
- Data structure:
  - Each instance is a hash containing: FRIEND_ID, FRAME_ID, VIEW_ID, THUMB_VIEW_ID, NAME_TEXT_ID, VIDEO_PLAYER_ID
    
- Setup:
  - HomeActivity instantiates videoplayers and adds their ids in the GridElement
  - HomeActivity discovers all the views, frames, etc and adds their ids in the GridElement
  - HomeActivity assigns initial positions for friends. 

- Methods
  - Add a FRAME_ID, VIEW_ID, THUMB_VIEW_ID, NAME_TEXT_ID, VIDEO_PLAYER_ID for a particular box
  - Associate a FriendId with a particular box (setup and swap from bench)
  - Get a FriendId from a Frame id (play or record clicked on a frame)
  - Get list of friendIds on the grid. (help determine who is on the bench)
  - Get VideoView for FrameId (play)

- Implications for VideoPlayer
  Current Architecture:
  - VideoPlayer is instantiated with friendId from which it gets friend
  - It gets videoView and thumbView from friendId
  New Architecture
  - VideoPlayer is instantiated with grid element from which it gets everything it needs.

- Usage
  - Play a video
  - Record a video

TODO:
 x Create the GridElement active model
 x Setup the GridElements in homeview on init.
 x Add the friends to the GridElements if they could no be retrieved.
 x Add the view ids to the GridElements
 x Add the videoPlayer Ids to the grid elements.
 x Move the relevant methods from friend to GridElementFactory
 
 
GridManager
-----------
- Role:
  - Manages moving friends between the bench and the grid.
  - Ranks friends for removal
    - TIME_OF_LAST_ACTION field in Friend keeps timestamp of last action.
    - Actions tracked:
      x PlayStart
      x RecordStart
      x VideoReceived (happens because moveFriendToGrid is called)
      x Moved to grid
    - Friends are ranked by a sort on TIME_OF_LAST_ACTION with most recent first

- Instantiation
  - None static
  
- Methods
  x friendsOnGrid
  x friendsOnBench
  x rankingActionOccurred
  x rankedFriendsOnGrid
  x lowestRankedFriendOnGrid
  x moveFriendToGrid
  
- Callbacks
  - gridDidChange
  
Usage and Scenarios:
- Click friend on the bench moves friend to the grid
- Video comes in for friend not on the grid. Moves friend to the grid and highlights and shows thumb.

TODO:
 x Create GridManager
 x Add TIME_OF_LAST_ACTION field to friend
 x Add methods
 x Add calls for actions tracked
 x Add moves to grid
   x Video downloaded
 x Add a callback interface on GridManager
 x Set the delegate
 
TEST:
- Grid and location of friends are restored from file.


BenchObject
-----------
- Role:
  - Object that is on the bench

- Attributes:
  - friendId
  - firstName
  - lastName
  - displayName
  
  
BenchController
---------------
- Role:
  - Shows and hides the bench
  - Populates the bench
  - Actions when contacts on the bench are clicked

- Instantiation
  - Singleton

- Methods
  - Show / hide bench
  - Populate bench

x Populate 
  x Display
    x Overflow from grid
    x Followed by rankedPhoneData
    - Followed by link to all contacts
  x Algorithm
    x Dedupe grid overflow by phone number
    x Friend gets phone number from server
    x Array of Overflow + deduped ranked phoneData
      x DisplayName
      x FriendId
      x MobileNumber

- Sub in and out of bench 
  - When a friend on the bench is clicked sub him in.
  
  
TODO:
x Get it to build
x Adjust the layout
  x Add action bar
  x Move reset and crash to action bar and wire them up.
  x Make a parent relativeLayout for homeView
  x Add a frameLayout for the bench
  x Create BenchController
x Make it singleton instance
x Instantiate SmsManager && set delegate
x Populate bench
- Set mobile number in friend
  - Pass it from the server
  - Load it on registration
  - Test the deduping


SmsManager
----------
- Role:
  - Only pull the address column in the cursor
  - Gets the contacts you text the most
  - Sends sms on your behalf.
  
- Methodology
  - Reads your entire smsInbox
  - Ranks phone numbers by frequency of messages

TODO:
- IMPORTANT: 
  - HANDLE the case of no messages.
  - Dont use strings for column names.
  
PROBLEM: On jills phone person field is null for all messages.
SOLUTION: Do not use the person field only use the address field look for a contact even if they dont have the person field.
  
  

ContactsManager
---------------
- Role:
  - Queries contacts for first and last name
    - By phone number
    - By person
    - Returns first and last names.
  - Manages autocomplete search on all contacts

- Autocomplete contacts search and select
  - Queries contacts by hasPhoneNumber returning lookupKey, displayName
    - Lazy query once when contactsManager is first instantiated.
    - String[] autocomplete consists of name.
  - BenchController gets list of valid phone numbers for contact
    - Tests to make sure it isnt an existing friend
      - If it is an existing friend just select the friend
    - Dialog asks the user which is the mobile number
    - Continues same as for sms

TODO:
x Create AutoCompleteContactsView 
x Add it to the layout of the bench
x Call to set it up in bench controller when showing the view
x Item picked get the contact


SelectPhoneNumberDialog
-----------------------
- Add kind of phone number field
  - Create a phoneNumberSelect itemView



InviteManager
-------------
- Role
  - Manages invites for person not currently a friend
  - Allows Tickle of friend where !hasApp
  
- Scenario:
  - Invite a person who is not currently a friend.
  - Sends the info to the server and gets back the friend.
    - HasApp field for friend.
  - Adds the friend.
    - Add object
    - Add to grid
  - Send text message to the friend if !hasApp.
  - Tickle friend when !hasApp
  - Set hasApp when receive first message
  
- Instantiation: 
  - multiple
  
IMPORTANT: Add a flag in connection to say whether Target is a new recruit for statistics purposes.


Handling phone numbers.
----------------------
- Before a phone number is sent off the phone we should make sure it has country code and is in a good format. 
- Test pull all numbers from contact list and put them country code format. 

IMPORTANT: Handle phone numbers and phone number comparison in ruby properly when doing invites.
  

Registration with SMS loopback
------------------------------
x Reg screen
  x First
  x Last
  x Country Code 
  x Mobile Phone Number
x Prepopulate
  x Grab the first last and phone from the User Profile on android
x Verify phone
x Send to server
  x Checks phone number again
    x If wrong 
      x send "status: error, title: Bad Number, msg: Enter a valid phone number"
    x If right
      x Send sms with code.
  x Finds or 
x Create user in initialized state with time dated sms code
x Let user know that he is getting a verification code
  x We sent you a code via text message to phone.
    Enter the code:


User Model Changes
x Status
  x initialized
  x verified
x verification_code
x verification _time_stamp

TODO:
x Get gem for phoneNumberUtils
x Update database and remigrate
x Add phone number check in reg
x Add handle error response in phone
x Add dialog for entering verification code

TEST:
x Bad firstname, lastname, phone
x code
  - expired
  x incorrect
  x null
  x correct
x version 
  x Obsolete


Server SmsHandler
-----------------
- send_verification_code(user)
  - Checks timestamp on users code
  - If 5 minutes or more remaining sends the same code.
  - Otherwise generates a new code and sends that.


Message from user who is not friend yet
---------------------------------------
- GetFriends
- PollallFriends


PROBLEM: HomeActivity registers itself as a delegate for each friend. When we add a new friend later homeActivity is not registered as a delegate.
SOLUTION: Move the delegate handling to the friendFactory class
TODO: 
x Remove addVideoStatusChangedCallbackDelegate from friend
x Add it to friend factory
x Call the factory instance

GENERAL TODO:
-------------
x Change find contact_id with name and all other queries to use the ? notation.
x Check that Liz O'Donnel doesn't break in this case.

x Add setContactAndShow() to selectPhoneNumberDialog
x Instantiate selectPhoneNumberDialog in Bench Controller at the beginning.
x Add hideAllViews to BenchController
x Call benchController.HideAllViews on any click or start recording in homeActivity
x Call benchController.HideAllViews on show bench

x Make sure ranked sms have valid and properly formatted phone number.

x Add a swipe gesture to open and close the bench.
x Highlight person when he lands on the bench.
x Change selectPhoneNumber to dialog
x Add dialog for send sms. 

o Sms manager takes to long to bring in ranked sms so should show with overflow first then add the ranked sms later.
o Use custom adapter for bench fields.
- Test autovideo play.
- Test setting has app when first video comes in from friend.
x Remove code that does check of sms
x Hint to send a welcome message to the prerson after he sends the sms.
x Check about bailing out.

- Server static landing page for zazoapp.com get the app on android and ios.


- Test cases:
  - Friend with blank first name
  - Friend with blank last name
  - Friend with blank phone
  - Friend with null for hasApp
  
  
CORNER CASES TO TEST:
--------------------
- Dont register pushToken for user until we have gotten past verification on registration.




 

  
