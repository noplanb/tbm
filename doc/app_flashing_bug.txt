Background of the Problem
-------------------------
The Zazo app has a couple services that run in the background. 
  - File Transfer (Upload and Download)
  - Broadcast receiver for notification intents.
  
The for models that require persistence the app saves it state in the file system. 
  - I want only an activity - the main activity to 
  
  
App Service/Activity project.
-----------------------------
- Create a sample project that has and Activity with a ui as well as a background service.
- Background service should send intents to the Activity.
- If the activity is in the background it should handle the intents without coming to the foreground or flashing the screen.
- If the activity is in the foreground it should handle the intents while continuing to display its ui.

Video record dimming in low light
---------------------------------
- Create a sample project with cameraPreview media recorder to record a 320x240 size video. 
- Figure out why in dim light conditions the preview and recording darkens considerably when you start recording.



Possible Architecture
---------------------
- Strategy:
  - Subclass and us Application rather home activity as the parent class that handles background intents and the state models.

- Instantiation of Application:
  - Subclass Application as a singleton 
  - Use manifest to refer to it
  - Make Application implement LocalBroadcastManager.

- Sending and Handling Intents:
    - Intents sent from GcmBroadcastReciever (notification) and from FileTransfermanager are sent as LocalBroadcastManager intents and received by Application. They are no longer sent as intents to wake an activity.
    - Intent handler is pulled into Application and out of HomeActivity it manages changes to state due to incoming intents.

- Managing the models:
  - Models are instantiated under Application
  - Saving and restoring the models to filesystem is handled by Application under its lifecycle.
  - Activities refer up to the application to access the models

- Communication between Application and activities
  - Activities register with the models under Application to receive notification of changes to state


Demo for new architecture
-------------------------
General goal: 
  - To thoroughly stress and test the architecture in a simple environment.
  - Throw a lot of simultaneous asynchronous events at the architecture to make sure it behaves as we assume, is thread safe, and doesn't crash unexpectedly.
  - Asynchronous events should include launching and killing the activity by the user concurrently with external events from background  services as well as pushNotifications.

NOTE: It turns out you can bind a service to another service using bindService. See here: http://stackoverflow.com/questions/6488445/could-a-service-bind-another-service. This may be useful so that UploadService, DownloadService, GcmIntentService can bind to the ModelManager service to ensure the models are in memory before they do work.
  
- Application subclass
  - Log onCreate event and all other events just so we can see them.
  - QUESTION: Should onCreate start the ModelManager service?
  
- PersistentModel class
  - Log all actions so we can see what is happening.
  - State instance variables:
    - downloadState:
      - DOWNLOADING_START
      - DOWNLOADING_1
      - DOWNLOADING_2
      - DOWNLOADING_3
      - DOWNLOADED
    - uploadState: 
      - UPLOADING_START
      - UPLOADING_1
      - UPLOADING_2
      - UPLOADING_3
      - UPLOADED
  - Instantiation:
    - Singleton pointed to by class getInstance()
  - Instance Methods
    - set and get for state instance variables
      - Thread safe 
  - Class methods and variables
    - Pointer to singleton instance
    - save: to filesystem
    - retrieve: from file system
    - addDelegate (StateChangeCallback)
    - removeDelegate (StateChangeCallback)
  - Interface: StateChangeCallback
    - stateDidChange: Called on the delegate(s) if any exist whenever the state changes.

- ModelManager service
  - Log all actions and events
  - Long lived service (START_STICKY?)
  - Interface: (ModelsReadyCallback)
  - Allows binding to set the delegate for the callback
  - OnCreate: Retrieves the PersistentModel from fileSystem
  - OnDestroy: Saves the PersistentModel to the fileSystem
  
- UploadService
  - QUESTION: how will this service know that the modelManager has restored the models? Bind this service to the ModelManager service?
  - Log all actions
  - Simulates our FileUploadService without actually doing any work.
  - IntentService
  - Actions:
    - Started with an intent
    - Changes uploadState in the PersistentModel to UPLOADING_1, waits 1 second, then changes it to UPLOADING_2, etc till UPLOADED 
    - After UPLOADED is reached service starts DownloadService (just to get more activity)

- DownloadService
  - QUESTION: how will this service know that the modelManager has restored the models? Bind with ModelManager service?
  - Same as UploadService but changes state uploadState in the PersistentModel waiting 1 second between the states. Completes when it gets to DOWNLOADED
  
- MainActivity
  - Log all actions and events
  - Starts and binds to ModelManager Service
  - Waits for onModelsReady event
  - UI
    - Waiting for models ready indication then:
    - TextField showing uploadState
    - TextField showing downloadState
    - Button to start upload
      - Changes state to UPLOADING_START (so we can see if there is any problem with activity setting state as well as service.)
      - Sends upload intent to UploadService
    - Button to finish() the activity
      
- GoogleCloudMessaging WakefulBroadCastReceiver, IntentService, 
  - QUESTION: how will this service know that the modelManager has restored the models? Bind with ModelManager service?
  - Log all events and actions
  - Role: 
    - to receive and handle push notifications.
    - So that we can make sure that rapidly occurring asynchronous external events dont cause unforeseen crashes or problems.
  - See TBM: GcmHandler, GcmIntentService, GcmBroadcastReceiver
  - I will write a little server so that we can rapidly send push notifications to the app.
  - Action on receiving a notifcation.
    - Change PersistantModel uploading state to UPLOADING_STARTED
    - Start UploadService
    
    
TESTS
-----

NOTICE: These tests require you to load the app on 2 phones

Interaction while app is live in foreground
-------------------------------------------
- Sending phone app live in foreground.
  - Send message
  - Notice.
    - Status indicators updating properly through sending, sent, received, viewed.

- Receiving phone app live in foreground.
  - Receive message
  - Notice 
    - Message received with unviewed indication.
    - No notification is placed on the phone.
  
  - Receive multiple messages
  - Notice 
    - Viewed messages are deleted  
    - Unviewed messages are retained 
    - New message thumbnail showing with unviewed indication.
    - Playing plays all unviewed messages as well as the new one.
    - No notification is placed on the phone
  
  - Receive message while playing message(s)
  - Notice 
    - New message plays at the end of the existing messages that are currently playing.
    - No notification is received on the phone
    
Interaction while app is terminated
------------------------------------
  - Send message but do not view on receiving phone.
    - Notice status indicators on sending phone showing message received  but not viewed by receiving phone.
  - Terminate sending phone app then view message on receiving phone.
  - Relaunch app on sending phone
    - Notice viewed indicator set on sending phone.

- Receiving phone terminated screen on
  - Receive a message
  - Notice 
    - notification in status bar 
    - notification in list of notifications.
  - Open app by clicking notification
  - Notice 
    - message should start playing automatically.
  - Close app
  - Notice 
    - Notifications are removed from list of notifications
    - Notifcations are removed from status bar

- Receiving phone terminated screen on
  - Receive a message
  - Notice 
    - notification in status bar 
    - notification in list of notifications.
  - Open app by clicking app icon
  - Notice 
    - message highlighted as unviewed.
  - Close app without viewing
  - Notice?
    - Are notifications removed?

- Receiving phone terminated screen on
  - Receive a message
  - Notice 
    - notification in status bar 
    - notification in list of notifications.
  - Open app by clicking app icon
  - Notice 
    - message highlighted as unviewed.
  - Close app without viewing
  - Notice?
    - Are notifications removed?
    
- Receiving phone terminated screen off with no security code for lock screen
  - Receive a message
  - Notice 
    - notification on lock screen
  - Open app by clicking notification
  - Notice 
    - message should start playing automatically.
  - Close app
  - Notice 
    - Notifications are removed from list of notifications
    - Notifcations are removed from status bar

- Receiving phone terminated screen off with security code for lock screen
  - Receive a message
  - Notice 
    - notification on lock screen
  - Click notification
  - Notice
    - takes you to enter code for unlocking screen.
  - Enter code
  - Notice 
    - message should start playing automatically.
  - Close app
  - Notice 
    - Notifications are removed from list of notifications
    - Notifcations are removed from status bar
    
    
Interaction while app is in the background but not terminated
-------------------------------------------------------------
  - Send message but do not view on receiving phone.
    - Notice status indicators on sending phone showing message received  but not viewed by receiving phone.
  - Background sending phone app then view message on receiving phone.
  - Foreground app on sending phone
    - Notice viewed indicator set on sending phone.

- Receiving phone background screen on
  - Receive a message
  - Notice 
    - notification in status bar 
    - notification in list of notifications.
  - Open app by clicking notification
  - Notice 
    - message should start playing automatically.
  - Close app
  - Notice 
    - Notifications are removed from list of notifications
    - Notifcations are removed from status bar

- Receiving phone background screen on
  - Receive a message
  - Notice 
    - notification in status bar 
    - notification in list of notifications.
  - Open app by clicking app icon
  - Notice 
    - message highlighted as unviewed.
  - Close app without viewing
  - Notice?
    - Are notifications removed?

- Receiving phone background screen on
  - Receive a message
  - Notice 
    - notification in status bar 
    - notification in list of notifications.
  - Open app by clicking app icon
  - Notice 
    - message highlighted as unviewed.
  - Close app without viewing
  - Notice?
    - Are notifications removed?


Interaction with phone calls putting the app in the paused state
---------------------------------------------------------------- 
- Sending phone app live in foreground
  - Begin recording a message.
  - Receive a phone call while recording.
    - Notice 
      - app replaced by phone app. 
      - Recording stops.
      - Message not sent
      - Closing phone call returns to app.
      - App records and plays properly after returning from phone call.
      
- Receiving phone app live in the foreground
  - Begin playing a long series of messages.
  - Receive a phone call while playing.
    - Notice 
      - app replaced by phone app. 
      - Playing stops.
      - Closing phone call returns to app.
      - App records and plays properly after returning from phone call.

- Receiving phone app is in background
  - Start a phone call
  - Receive a message while on phone call. 
  - Notice
    - Phone call is not interrupted.
    - Notification is received.