buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.0'
    }
}
apply plugin: 'com.android.application'

repositories {
    jcenter()
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.zazoapp.client"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 180
        versionName "3.6.3" //<!-- {MAIN_VERSION}.{FEATURE_SET}.{REVISION}-->
        resConfigs "en"
        multiDexEnabled true // Enabling multidex support.
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "DISPATCH_ENVIRONMENT", "\"production\""
        }

        beta {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "DISPATCH_ENVIRONMENT", "\"production\""
        }

        debug {
            debuggable true
            buildConfigField "String", "DISPATCH_ENVIRONMENT", "\"development\""
        }

        release_debuggable {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "DISPATCH_ENVIRONMENT", "\"production\""
        }
    }
    applicationVariants.all {
        variant ->
            appendVersionNameVersionCode(variant, defaultConfig)
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    compile 'com.android.support:multidex:1.0.1'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.google.android.gms:play-services-gcm:7.5.0'
    compile 'com.google.android.gms:play-services-ads:7.5.0'
    compile 'cz.msebera.android:httpclient:4.3.3'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.5'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'com.jakewharton:butterknife:6.1.0'
    compile 'com.googlecode.libphonenumber:libphonenumber:7.2.1'
    compile 'com.amazonaws:aws-android-sdk-core:2.2.5'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.amazonaws:aws-android-sdk-s3:2.2.5'
    compile 'com.balysv.materialmenu:material-menu-toolbar:1.5.4'
    compile 'com.android.support:design:23.2.1'
    compile 'de.hdodenhof:circleimageview:2.0.0'
    compile 'com.android.support:cardview-v7:23.2.1'
    compile 'com.github.castorflex.smoothprogressbar:library:1.1.0'
    compile 'com.github.castorflex.smoothprogressbar:library-circular:1.2.0'
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
}

def appendVersionNameVersionCode(variant, defaultConfig) {
    //check if staging variant
    if (variant.name == android.buildTypes.release.name || variant.name == android.buildTypes.beta.name) {
        variant.outputs.each { output ->
            def alignedOutputFile = output.outputFile
            def unalignedOutputFile = output.packageApplication.outputFile

            // Customise APK filenames (to include build version)
            if (variant.buildType.zipAlignEnabled) {
                // normal APK
                output.outputFile = new File(alignedOutputFile.parent, "zazo-" + defaultConfig.versionName + "-" + defaultConfig.versionCode + "-" + variant.name + ".apk")
            }
            // 'unaligned' APK
            output.packageApplication.outputFile = new File(unalignedOutputFile.parent, "zazo" + defaultConfig.versionName + "-" + defaultConfig.versionCode + "-" + variant.name + ".apk")
        }
    }
}
